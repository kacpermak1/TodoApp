{"version":3,"sources":["Components/Card.js","Components/WelcomeCard.js","App.js","serviceWorker.js","index.js"],"names":["Completionist","style","color","Card","state","marked","onClickMark","localStorage","getItem","props","time","date","setState","removeItem","task","i","setItem","removeMarkedTask","remove","e","removeDate","removeTime","localMarked","this","className","zIndex","fontSize","display","flexDirection","alignItems","marginRight","split","reverse","join","marginBottom","renderer","days","hours","minutes","seconds","completed","onClick","Component","currentHours","Date","getHours","currentMinutes","getMinutes","initState","App","onInputValChange","inputVal","target","value","onDateChange","dateVal","current","onTimeChange","timeVal","onButtonClick","preventDefault","tasks","dates","times","incompleteFormAttempt","newTasks","newDates","newTimes","removeTask","taskIndex","taskToRemove","splice","newArr","filter","JSON","parse","length","window","clear","dateIndex","dateToRemove","timeIndex","timeToRemove","setLocalStorage","stringify","toLocaleDateString","React","createRef","context","document","addEventListener","dateElems","querySelectorAll","M","Datepicker","init","minDate","format","onClose","timeElems","Timepicker","twelveHour","onCloseEnd","prevProps","prevState","height","overflow","paddingBottom","innerWidth","marginTop","onChange","placeholder","id","type","ref","htmlFor","position","map","key","WelcomeCard","bottom","Boolean","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.130ffa2f.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport Countdown from 'react-countdown-now';\n\nconst Completionist = () => <span style={{ color: '#ff3d00' }}>TIME IS UP!</span>;\n\nclass Card extends Component {\n\n    state = {\n        marked: ''\n    }\n\n    onClickMark = () => {\n        if (localStorage.getItem(this.props.time+this.props.date)) {\n            this.setState({ marked: '' })\n            localStorage.removeItem(this.props.time+this.props.date, this.props.task)\n        } else {\n            this.setState({ marked: this.props.i })\n            localStorage.setItem(this.props.time+this.props.date, this.props.task)\n        }\n    }\n\n    removeMarkedTask = () => {\n        if(localStorage.getItem(this.props.time+this.props.date) && localStorage.getItem(this.props.time+this.props.date) === this.props.task){\n            localStorage.removeItem(this.props.time+this.props.date, this.props.task)\n        }\n    }\n\n    remove = (e) => {\n        this.props.remove(this.props.i);\n        this.props.removeDate(this.props.i);\n        this.props.removeTime(this.props.i);\n        this.removeMarkedTask();\n    }\n\n    render() {\n\n        const date = this.props.date + 'T' + this.props.time;\n\n        let localMarked;\n\n        if(localStorage.getItem(this.props.time+this.props.date) && localStorage.getItem(this.props.time+this.props.date) === this.props.task ){\n            localMarked = true\n        }else {localMarked = false}\n\n        return (\n            <div className=\"col s12 m6 l6 xl4\">\n                <div className={localMarked ? \"card deep-orange lighten-1 \" : \"card blue-grey darken-2\"} style={{ zIndex: \"2\" }}>\n                    <div className=\"card-content white-text\">\n                        <span className=\"card-title\">{this.props.task}</span>\n                        <p>Deadline: </p>\n                        <div style={{ fontSize: '18px', display: \"flex\", flexDirection: \"row\", alignItems: \"center\" }}>\n                            <i className=\"material-icons\" style={{ fontSize: '18px', marginRight:\"2px\"}}>date_range</i> <p>{this.props.date.split('-').reverse().join('.')}</p>\n                        </div>\n                        <div style={{ fontSize: '18px', marginBottom: '10px', display: \"flex\", flexDirection: \"row\", alignItems: \"center\" }}>\n                            <i className=\"material-icons\" style={{ fontSize: '18px',marginRight:\"2px\"}}>query_builder</i> <p>{this.props.time}</p>\n                        </div>\n                        <p>Time remaining:</p>\n                        <Countdown date={date} renderer={props => <p style={{ fontSize: '18px' }}>{(props.days > 0) && props.days}{(props.days > 0 && props.days < 2) && 'Day'}{(props.days > 1) && 'Days'} {(props.hours > 0) && props.hours}{(props.hours > 0) && 'h'} {(props.minutes > 0) && props.minutes + 'min'} {(props.seconds > 0) && props.seconds + 'sec'} {props.completed ? <Completionist /> : ''}</p>} />\n                    </div>\n                    <div className=\"card-action\">\n                        <button onClick={this.remove} style={{ marginRight: '6px' }} className=\"waves-effect waves-light amber darken-1 btn-small\">Remove</button>\n                        <button onClick={this.onClickMark} className=\"amber darken-1 waves-light btn-small\">Mark</button>\n                    </div>\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default Card;","import React, { Component } from 'react';\n\nclass Card extends Component {\n\n    render() {\n        \n        return (\n            <div className=\"col s12 m12 l12\">\n                <div className = \"card blue-grey darken-2\" >\n                    <div className=\"card-content white-text\">\n                        <span className=\"card-title\">You have no tasks!</span>\n                        <p style={{ fontSize: '18px' }}>Use the form above to add new tasks or enjoy your free time!</p>\n                    </div>\n                    <div className=\"card-action\">\n                    </div>\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default Card;","import React, { Component } from 'react';\nimport Card from './Components/Card';\nimport WelcomeCard from './Components/WelcomeCard';\nimport M from \"materialize-css\";\n\nlet currentHours = new Date().getHours();\nlet currentMinutes = new Date().getMinutes();\nif (currentMinutes < 10) { currentMinutes = '0' + currentMinutes };\nif (currentHours < 10) { currentHours = '0' + currentHours };\n\nconst initState = currentHours + ':' + currentMinutes;\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      inputVal: '',\n      tasks: localStorage.getItem('tasks') ? JSON.parse(localStorage.getItem('tasks')) : [],\n      dates: localStorage.getItem('dates') ? JSON.parse(localStorage.getItem('dates')) : [],\n      times: localStorage.getItem('times') ? JSON.parse(localStorage.getItem('times')) : [],\n      dateVal: new Date().toLocaleDateString().split('.').reverse().join('-'),\n      timeVal: initState,\n      incompleteFormAttempt: false\n    }\n    this.dateVal = React.createRef();\n    this.timeVal = React.createRef();\n  }\n\n  componentDidMount() {\n\n    const context = this;\n    document.addEventListener('DOMContentLoaded', function () {\n      const dateElems = document.querySelectorAll('.datepicker');\n      M.Datepicker.init(dateElems, {\n        minDate: new Date(),\n        format: 'yyyy-mm-dd',\n        onClose: context.onDateChange\n      });\n      const timeElems = document.querySelectorAll('.timepicker');\n      M.Timepicker.init(timeElems, {\n        twelveHour: false,\n        onCloseEnd: context.onTimeChange\n      });\n    });\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    if (prevState !== this.state.tasks) {\n      this.setLocalStorage()\n    }\n  }\n\n  onInputValChange = (e) => {\n    this.setState({ inputVal: e.target.value })\n  }\n\n  onDateChange = (e) => {\n    this.setState({ dateVal: this.dateVal.current.value })\n  }\n\n  onTimeChange = (e) => {\n    this.setState({ timeVal: this.timeVal.current.value })\n  }\n\n  onButtonClick = (e) => {\n    e.preventDefault();\n    const { inputVal, dateVal, timeVal, tasks, dates, times, incompleteFormAttempt } = this.state;\n\n    const newTasks = [...tasks, inputVal];\n    const newDates = [...dates, dateVal];\n    const newTimes = [...times, timeVal];\n\n    if (inputVal !== '' && dateVal !== '' && timeVal !== '') {\n      this.setState({ tasks: newTasks, inputVal: '', dateVal: '', timeVal: '', dates: newDates, times: newTimes, incompleteFormAttempt: false });\n    } else { this.setState({ incompleteFormAttempt: !incompleteFormAttempt }) }\n  }\n\n  removeTask = (taskIndex) => {\n    const taskToRemove = this.state.tasks.splice(taskIndex, 1);\n    const newArr = this.state.tasks.filter(task => task !== taskToRemove);\n\n    this.setState({ tasks: newArr });\n    if (JSON.parse(localStorage.getItem('tasks')).length === 1) {\n      window.localStorage.clear()\n    }\n  }\n\n  removeDate = (dateIndex) => {\n    const dateToRemove = this.state.dates.splice(dateIndex, 1);\n    const newArr = this.state.dates.filter(date => date !== dateToRemove);\n    this.setState({ dates: newArr });\n  }\n\n  removeTime = (timeIndex) => {\n    const timeToRemove = this.state.times.splice(timeIndex, 1);\n    const newArr = this.state.times.filter(date => date !== timeToRemove);\n    this.setState({ times: newArr });\n  }\n\n  setLocalStorage = () => {\n    localStorage.setItem('tasks', JSON.stringify(this.state.tasks));\n    localStorage.setItem('dates', JSON.stringify(this.state.dates));\n    localStorage.setItem('times', JSON.stringify(this.state.times));\n  }\n\n  render() {\n\n    return (\n      <>\n        <div className=\"background\">\n          <div className=\"main_content\" style={{ height: \"100vh\", overflow: \"scroll\", paddingBottom: window.innerWidth <= 1024 ? \"120px\" : \"40px\" }}>\n            <div className=\"row container\" style={{ marginTop: \"20px\" }}>\n              <form className=\"col s12\">\n                <div className=\"input-field\">\n                  <label>Task</label>\n                  <input value={this.state.inputVal} onChange={this.onInputValChange} placeholder=\"to do\" id=\"first_name\" type=\"text\" />\n                </div>\n                <div className=\"row\">\n                  <div className=\"input-field col s6\">\n                    <input type=\"text\" ref={this.dateVal} onChange={this.onDateChange} value={this.state.dateVal} className=\"datepicker\" placeholder=\"Deadline Date\" />\n                    <label>Deadline date</label>\n                  </div>\n                  <div className=\"input-field col s6\">\n                    <input type=\"text\" ref={this.timeVal} onChange={this.onTimeChange} value={this.state.timeVal} id='time' placeholder=\"Deadline Time\" className=\"timepicker\" />\n                    <label htmlFor='time'>Deadline time</label>\n                  </div>\n                </div>\n                <div style={{ position: \"relative\" }}>\n                  <button onClick={this.onButtonClick} className=\"amber darken-1 btn\">Add task</button>\n                  {this.state.incompleteFormAttempt ? <p className=\"form_message\">Fill all the inputs above</p> : ''}\n                </div>\n              </form>\n            </div>\n            <div className=\"container\">\n              <div className=\"row\">\n                {(this.state.tasks) &&\n                  this.state.tasks.map((task, i) => { return <Card task={task} key={i} i={i} time={this.state.times[i]} date={this.state.dates[i]} remove={this.removeTask} removeTime={this.removeTime} removeDate={this.removeDate} /> })\n                }\n                {(this.state.tasks && this.state.tasks.length === 0) && <WelcomeCard />}\n              </div>\n            </div>\n          </div>\n          <div className=\"footer\" style={{ position: \"fixed\", bottom: \"0\" }}><p> Created by Kacper Makowka</p></div>\n        </div>\n      </>\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport './scss/main.scss';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}